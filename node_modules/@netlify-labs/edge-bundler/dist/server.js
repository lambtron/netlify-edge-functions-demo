import { tmpName } from 'tmp-promise';
import { DenoBridge } from './bridge.js';
import { findFunctions } from './finder.js';
import { generateStage2 } from './formats/javascript.js';
import { ImportMap } from './import_map.js';
import { generateManifest } from './manifest.js';
const serve = async (port, sourceDirectories, { debug, distImportMapPath, importMaps, onAfterDownload, onBeforeDownload } = {}) => {
    const deno = new DenoBridge({
        onAfterDownload,
        onBeforeDownload,
    });
    const distDirectory = await tmpName();
    const functions = await findFunctions(sourceDirectories);
    const stage2Path = await generateStage2(functions, distDirectory, 'dev.js');
    const getManifest = (declarations) => generateManifest({ bundles: [], declarations, functions });
    // Wait for the binary to be downloaded if needed.
    await deno.getBinaryPath();
    // Creating an ImportMap instance with any import maps supplied by the user,
    // if any.
    const importMap = new ImportMap(importMaps);
    const flags = ['--allow-all', '--unstable', '--no-clear-screen', '--watch', `--import-map=${importMap.toDataURL()}`];
    if (debug) {
        flags.push('--log-level=debug');
    }
    deno.run(['run', ...flags, stage2Path, port.toString()], { wait: false });
    if (distImportMapPath) {
        await importMap.writeToFile(distImportMapPath);
    }
    return {
        getManifest,
    };
};
export { serve };
